<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.kinder_parent.mapper.KinderParentMapper">
    
    <resultMap type="KinderParent" id="KinderParentResult">
        <result property="parentId"    column="parent_id"    />
        <result property="studentId"    column="student_id"    />
        <result property="parentName"    column="parent_name"    />
        <result property="phonenumber"    column="phonenumber"    />
        <result property="relationship"    column="relationship"    />
        <result property="email"    column="email"    />
        <result property="status"    column="status"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="remark"    column="remark"    />
    </resultMap>

    <sql id="selectKinderParentVo">
        select parent_id, student_id, parent_name, phonenumber, relationship, email, status, create_by, create_time, update_by, update_time, remark from kinder_parent
    </sql>

    <select id="selectKinderParentList" parameterType="KinderParent" resultMap="KinderParentResult">
        <include refid="selectKinderParentVo"/>
        <where>  
            <if test="parentName != null  and parentName != ''"> and parent_name like concat('%', #{parentName}, '%')</if>
            <if test="phonenumber != null  and phonenumber != ''"> and phonenumber = #{phonenumber}</if>
            <if test="email != null  and email != ''"> and email = #{email}</if>
        </where>
    </select>
    
    <select id="selectKinderParentByParentId" parameterType="Long" resultMap="KinderParentResult">
        <include refid="selectKinderParentVo"/>
        where parent_id = #{parentId}
    </select>
        
    <insert id="insertKinderParent" parameterType="KinderParent" useGeneratedKeys="true" keyProperty="parentId">
        insert into kinder_parent
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentId != null">student_id,</if>
            <if test="parentName != null and parentName != ''">parent_name,</if>
            <if test="phonenumber != null">phonenumber,</if>
            <if test="relationship != null">relationship,</if>
            <if test="email != null">email,</if>
            <if test="status != null">status,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="remark != null">remark,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentId != null">#{studentId},</if>
            <if test="parentName != null and parentName != ''">#{parentName},</if>
            <if test="phonenumber != null">#{phonenumber},</if>
            <if test="relationship != null">#{relationship},</if>
            <if test="email != null">#{email},</if>
            <if test="status != null">#{status},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="remark != null">#{remark},</if>
         </trim>
    </insert>

    <update id="updateKinderParent" parameterType="KinderParent">
        update kinder_parent
        <trim prefix="SET" suffixOverrides=",">
            <if test="studentId != null">student_id = #{studentId},</if>
            <if test="parentName != null and parentName != ''">parent_name = #{parentName},</if>
            <if test="phonenumber != null">phonenumber = #{phonenumber},</if>
            <if test="relationship != null">relationship = #{relationship},</if>
            <if test="email != null">email = #{email},</if>
            <if test="status != null">status = #{status},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="remark != null">remark = #{remark},</if>
        </trim>
        where parent_id = #{parentId}
    </update>

    <delete id="deleteKinderParentByParentId" parameterType="Long">
        delete from kinder_parent where parent_id = #{parentId}
    </delete>

    <delete id="deleteKinderParentByParentIds" parameterType="String">
        delete from kinder_parent where parent_id in 
        <foreach item="parentId" collection="array" open="(" separator="," close=")">
            #{parentId}
        </foreach>
    </delete>
</mapper>